{"version":3,"sources":["constants.js","actions.js","api/api.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/MainPage.js","containers/App.js","serviceWorker.js","reducers.js","index.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","requestRobots","dispatch","link","type","fetch","then","Response","json","data","payload","catch","error","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","aria-label","placeholder","onChange","Scroll","props","children","ErrorBoundry","state","hasError","info","this","setState","Component","MainPage","filteredRobots","filter","robot","toLowerCase","includes","searchField","onRequestRobots","onSearchChange","isPending","App","connect","searchRobots","event","text","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.cb5f5018.chunk.js","sourcesContent":["export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED  = 'REQUEST_ROBOTS_FAILED';","import { CHANGE_SEARCH_FIELD,\r\n         REQUEST_ROBOTS_PENDING,\r\n         REQUEST_ROBOTS_SUCCESS,\r\n         REQUEST_ROBOTS_FAILED } from './constants'\r\n\r\nimport { apiCall } from './api/api'\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  apiCall('https://jsonplaceholder.typicode.com/users')\r\n    .then( data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch( error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const apiCall = (link) =>\r\n  fetch(link).then(Response => Response.json());","import React from 'react';\r\n\r\nconst Card = ( { name, email, id } ) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?size=200x200`}></img>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    /* the map function creates a new array with the results of calling\r\n     * a function on every element in the calling array */\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return (\r\n                        <Card \r\n                        key={i}\r\n                        id={robots[i].id}\r\n                        name={robots[i].name}\r\n                        email={robots[i].email}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n                aria-label='search robots'\r\n                className = 'pa3 ba b--green bg-lightest-blue'\r\n                type='search'\r\n                placeholder='search robots'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react'\r\nimport '../containers/App.css'\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div className='scrollbar-container'>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Ooooops. That's not good.</h1>;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport '../containers/App.css'\r\n\r\nclass MainPage extends Component {\r\n\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  filteredRobots = () => {\r\n    return this.props.robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(this.props.searchField.toLowerCase());\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { onSearchChange, isPending } = this.props;\r\n    \r\n    return isPending ?\r\n      <h1>Loading...</h1> :\r\n    (\r\n      <div className='tc'>\r\n        <h1 className='f1'>Robofriends</h1>\r\n        <SearchBox searchChange={onSearchChange}/>\r\n        <Scroll>\r\n          <ErrorBoundry>\r\n            <CardList robots={this.filteredRobots()}/>\r\n          </ErrorBoundry>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainPage;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport '../containers/App.css'\r\n\r\nimport { requestRobots, setSearchField } from '../actions'\r\nimport MainPage from '../components/MainPage';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return { \r\n    onSearchChange: (event) => dispatch( setSearchField(event.target.value) ),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return <MainPage { ...this.props } />\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED } from './constants'\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n        default:\r\n            return state;                                                                                                        \r\n    }\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign( {}, state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign( {}, state, { robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({ error: action.payload, isPending: false })\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\r\nimport { createLogger } from 'redux-logger'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport serviceWorker from './serviceWorker';\r\nimport 'tachyons'\r\nimport { searchRobots, requestRobots } from './reducers';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App/>\r\n  </Provider>, \r\n  document.getElementById('root'));\r\nserviceWorker();\r\n"],"sourceRoot":""}